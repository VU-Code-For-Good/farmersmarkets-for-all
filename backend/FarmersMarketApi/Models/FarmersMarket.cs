/*
 * Farmer's Markets - OpenAPI 3.0
 *
 * Does cool stuff
 *
 * OpenAPI spec version: 1.0.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace FarmersMarketApi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FarmersMarket : IEquatable<FarmersMarket>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        //TODO had to make this a long
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>

        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OperatingDay
        /// </summary>

        [DataMember(Name="operatingDay")]
        public List<OperatingDay> OperatingDay { get; set; }

        /// <summary>
        /// Gets or Sets OperatingMonths
        /// </summary>

        [DataMember(Name="operatingMonths")]
        public List<string> OperatingMonths { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>

        [DataMember(Name="phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets StreetAddress
        /// </summary>

        [DataMember(Name="streetAddress")]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>

        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets ZipCode
        /// </summary>

        [DataMember(Name="zipCode")]
        public string ZipCode { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>

        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>

        [DataMember(Name="website")]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets SocialMedia
        /// </summary>

        [DataMember(Name="socialMedia")]
        public List<SocialMedia> SocialMedia { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FarmersMarket {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OperatingDay: ").Append(OperatingDay).Append("\n");
            sb.Append("  OperatingMonths: ").Append(OperatingMonths).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  SocialMedia: ").Append(SocialMedia).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FarmersMarket)obj);
        }

        /// <summary>
        /// Returns true if FarmersMarket instances are equal
        /// </summary>
        /// <param name="other">Instance of FarmersMarket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FarmersMarket other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    OperatingDay == other.OperatingDay ||
                    OperatingDay != null &&
                    OperatingDay.SequenceEqual(other.OperatingDay)
                ) && 
                (
                    OperatingMonths == other.OperatingMonths ||
                    OperatingMonths != null &&
                    OperatingMonths.SequenceEqual(other.OperatingMonths)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    StreetAddress == other.StreetAddress ||
                    StreetAddress != null &&
                    StreetAddress.Equals(other.StreetAddress)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    ZipCode == other.ZipCode ||
                    ZipCode != null &&
                    ZipCode.Equals(other.ZipCode)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    Website == other.Website ||
                    Website != null &&
                    Website.Equals(other.Website)
                ) && 
                (
                    SocialMedia == other.SocialMedia ||
                    SocialMedia != null &&
                    SocialMedia.SequenceEqual(other.SocialMedia)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (OperatingDay != null)
                    hashCode = hashCode * 59 + OperatingDay.GetHashCode();
                    if (OperatingMonths != null)
                    hashCode = hashCode * 59 + OperatingMonths.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (StreetAddress != null)
                    hashCode = hashCode * 59 + StreetAddress.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (ZipCode != null)
                    hashCode = hashCode * 59 + ZipCode.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (Website != null)
                    hashCode = hashCode * 59 + Website.GetHashCode();
                    if (SocialMedia != null)
                    hashCode = hashCode * 59 + SocialMedia.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FarmersMarket left, FarmersMarket right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FarmersMarket left, FarmersMarket right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
