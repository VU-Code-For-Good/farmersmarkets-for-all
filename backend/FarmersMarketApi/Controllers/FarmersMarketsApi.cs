/*
 * Farmer's Markets - OpenAPI 3.0
 *
 * Does cool stuff
 *
 * OpenAPI spec version: 1.0.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.ComponentModel.DataAnnotations;
using FarmersMarketApi.Application.Blls;
using FarmersMarketApi.Attributes;
using FarmersMarketApi.Models;
using FarmersMarketApi.Utilities;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using FarmersMarket = FarmersMarketApi.Models.FarmersMarket;

namespace FarmersMarketApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class FarmersMarketsApiController : ControllerBase
    {
        private readonly IFarmersMarketBll _farmersMarketBll;

        public FarmersMarketsApiController(IFarmersMarketBll farmersMarketBll)
        {
            _farmersMarketBll = farmersMarketBll;
        }
        
        /// <summary>
        /// Gets all Farmers Markets with within the specified state
        /// </summary>
        /// <remarks>Returns a collecction of farmers markets</remarks>
        /// <param name="state">state for user</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid State</response>
        /// <response code="404">No Farmers Markets taht accepts SNAP</response>
        /// <response code="500">Unexpected error occurred</response>
        [HttpGet]
        [Route("/farmersMarkets/{state:alpha}")]
        [ValidateModelState]
        [SwaggerOperation("GetFarmersMarketsByState")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelApiResponse), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(ModelApiResponse), description: "Invalid State")]
        [SwaggerResponse(statusCode: 404, type: typeof(ModelApiResponse), description: "No Farmers Markets that accepts SNAP")]
        [SwaggerResponse(statusCode: 500, type: typeof(ModelApiResponse), description: "Unexpected error occurred")]
        public virtual async Task<IActionResult> GetFarmersMarketsByState([FromRoute][Required][StringLength(2, MinimumLength = 2)] string state)
        {
            if (!StateMap.States.TryGetValue(state.ToUpper(), out _))
            {
                return StatusCode(400, new ModelApiResponse
                {
                    Code = 400,
                    FarmersMarkets = new List<FarmersMarket>(),
                    Message = $"{state} is not a valid US state."
                });
            }

            try
            {
                var farmersMarkets = await _farmersMarketBll.GetFarmersMarketsByStateAsync(state);

                if (!farmersMarkets.Any())
                {
                    return StatusCode(404, new ModelApiResponse
                    {
                        Code = 404,
                        FarmersMarkets = new List<FarmersMarket>(),
                        Message = $"There are no farmers markets that accept SNAP in {state}."
                    });
                }

                return StatusCode(200, new ModelApiResponse
                {
                    Code = 200,
                    FarmersMarkets = farmersMarkets.Select(market => new FarmersMarket
                    {
                        Id = market.Id,
                        Name = market.Name,
                        Phone = market.Phone,
                        StreetAddress = market.StreetAddress,
                        City = market.City,
                        State = market.State,
                        ZipCode = market.ZipCode,
                        Email = market.Email,
                        Website = market.Website,
                    }).ToList()
                });

            }
            catch (Exception)
            {
                return StatusCode(500, new ModelApiResponse
                {
                    Code = 500,
                    FarmersMarkets = new List<FarmersMarket>(),
                    Message = "Unexpected error occurred."
                });
            }
        }

        /// <summary>
        /// Gets all Farmers Markets for a zipcode
        /// </summary>
        /// <remarks>Returns a collection of farmers markets</remarks>
        /// <param name="zipCode">zip code for user</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid Zip Code</response>
        /// <response code="404">No Farmers Markets that accepts SNAP</response>
        /// <response code="500">Unexpected error occurred</response>
        [HttpGet]
        [Route("/farmersMarkets/{zipCode:regex(^\\d{{5}}$)}")]
        [ValidateModelState]
        [SwaggerOperation("GetFarmersMarketsByZipcode")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelApiResponse), description: "Successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(ModelApiResponse), description: "Invalid Zip Code")]
        [SwaggerResponse(statusCode: 500, type: typeof(ModelApiResponse), description: "Unexpected error occurred")]
        public virtual async Task<IActionResult> GetFarmersMarketsByZipcode([FromRoute][Required] string zipCode)
        {
            try
            {
                var farmersMarkets = await _farmersMarketBll.GetFarmersMarketsByZipCodeAsync(zipCode); 
                
                if (farmersMarkets.Count > 0)
                {
             
                    return StatusCode(200, new ModelApiResponse
                    {
                        Code = 200,
                        Message = "Successful operation",
                        FarmersMarkets = farmersMarkets.Select(market => new FarmersMarket
                        {
                            Id = market.Id,
                            Name = market.Name,
                            Phone = market.Phone,
                            StreetAddress = market.StreetAddress,
                            City = market.City,
                            State = market.State,
                            ZipCode = market.ZipCode,
                            Email = market.Email,
                            Website = market.Website,
                        }).ToList()
                    });
                }

                return StatusCode(404);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new ModelApiResponse
                {
                    Code = 500,
                    Message = "Unexpected error occurred: " + ex.Message
                });
            }
        }
    }
}
